// --------------------------
// Controller class creation
// --------------------------
// Constructor
class Charba_ControllerType extends Chart.controllers._ChartType {
	constructor(...args) {
		super(...args);
	}
};
// Defines the flag to clone the defaults
Charba_ControllerType.cloneDefaults = _ControllerCloneDefaults;
// --------------------
// Internal methods
// --------------------
// gets the wrappers y controller type or null if not defined
Charba_ControllerType.prototype.checkAndGetWrapper = function(property){
	const delegated = CharbaJsControllerHelper.wrappers._ControllerType;
	if (typeof delegated !== 'undefined' && typeof delegated[property] === 'function'){
		return delegated;
	}
	return null;
};
// --------------------
// Overrided methods
// --------------------
// Initializes the controller
Charba_ControllerType.prototype.initialize = function() {
	const delegated = this.checkAndGetWrapper('initialize');
	if (delegated !== null){
		delegated.initialize.apply(this, arguments);
	} else {
		Chart.controllers._ChartType.prototype.initialize.apply(this, arguments);
	}		
};
// Parse the data into the controller meta data.
Charba_ControllerType.prototype.parse = function() {
	const delegated = this.checkAndGetWrapper('parse');
	if (delegated !== null){
		delegated.parse.apply(this, arguments);
	} else {
		Chart.controllers._ChartType.prototype.parse.apply(this, arguments);
	}		
};
// Draw the representation of the dataset
Charba_ControllerType.prototype.draw = function() {
	const delegated = this.checkAndGetWrapper('draw');
	if (delegated !== null){
		delegated.draw.apply(this, arguments);
	} else {
		Chart.controllers._ChartType.prototype.draw.apply(this, arguments);
	}			
};
// Update the elements in response to new data
Charba_ControllerType.prototype.update = function() {
	const delegated = this.checkAndGetWrapper('update');
	if (delegated !== null){
		delegated.update.apply(this, arguments);
	} else {
		Chart.controllers._ChartType.prototype.update.apply(this, arguments);
	}		
};
// Ensures that the dataset represented by this controller is linked to a scale. 
// Overridden to helpers.noop in the polar area and doughnut controllers as these chart types using a single scale
Charba_ControllerType.prototype.linkScales = function() {
	const delegated = this.checkAndGetWrapper('linkScales');
	if (delegated !== null){
		delegated.linkScales.apply(this, arguments);
	} else {
		Chart.controllers._ChartType.prototype.linkScales.apply(this, arguments);
	}		
};
// --------------------
// Register to CHART.JS
// --------------------
// sets the controller id
Charba_ControllerType.id = '_ControllerType'; 
// copies the default options of extended chart type
// check if it must be cloned
Charba_ControllerType.defaults = Charba_ControllerType.cloneDefaults ? Object.assign({}, Chart.controllers._ChartType.defaults) : Chart.controllers._ChartType.defaults; 
// registers into CHART.JS
Chart.register(Charba_ControllerType);