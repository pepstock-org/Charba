/**
    Copyright 2017 Andrea "Stock" Stocchero

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

	    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
package org.pepstock.charba.client.events;

import org.pepstock.charba.client.IsChart;
import org.pepstock.charba.client.commons.Key;

/**
 * Abstract event which represents a CHART.JS event, which contains a function context, as chart.
 * 
 * @author Andrea "Stock" Stocchero
 */
abstract class AbstractChartEvent extends AbstractEvent {

	// instance of event context
	private final ChartEventContext eventContext;
	// options key where default function is stored
	private final Key key;

	/**
	 * Creates the event with legend item related to the click
	 * 
	 * @param eventContext event context generated by CHART.js
	 * @param type type of event
	 * @param key options key where default function is stored
	 */
	protected AbstractChartEvent(ChartEventContext eventContext, EventType type, Key key) {
		super(eventContext != null ? eventContext.getNativeEvent() : null, type);
		// checks if arguments are consistent
		if (eventContext == null || eventContext.getNativeChart() == null) {
			throw new IllegalArgumentException("Chart event context argument is null or not consistent");
		}
		Key.checkIfValid(key);
		this.eventContext = eventContext;
		this.key = key;
	}

	/**
	 * Returns the java script function context of CHART.JS events.
	 * 
	 * @return the java script function context of CHART.JS events.
	 */
	public final ChartEventContext getContext() {
		return eventContext;
	}

	/**
	 * Returns the options key where default function is stored.
	 * 
	 * @return the options key where default function is stored
	 */
	public final Key getKey() {
		return key;
	}

	/**
	 * Returns the chart instance, stored in the event as source.
	 * 
	 * @return the chart instance
	 */
	@Override
	public IsChart getChart() {
		return eventContext.getChart();
	}

}