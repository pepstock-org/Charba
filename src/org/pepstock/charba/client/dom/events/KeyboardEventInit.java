/**
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at
    
      http://www.apache.org/licenses/LICENSE-2.0
    
    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.
*/
package org.pepstock.charba.client.dom.events;

import org.pepstock.charba.client.commons.Constants;
import org.pepstock.charba.client.commons.Key;
import org.pepstock.charba.client.dom.enums.KeyboardLocation;
import org.pepstock.charba.client.items.Undefined;

/**
 * Initialization object for a {@link NativeKeyboardEvent}.
 * 
 * @author Andrea "Stock" Stocchero
 *
 */
public final class KeyboardEventInit extends UIEventInit implements IsModifiersHandler {

	// default instance
	static final KeyboardEventInit DEFAULT_INSTANCE = new KeyboardEventInit();

	// default key
	private static final String DEFAULT_KEY = Constants.EMPTY_STRING;
	// default code
	private static final String DEFAULT_CODE = Constants.EMPTY_STRING;
	// default location
	private static final int DEFAULT_LOCATION = 0;

	/**
	 * Name of properties of native object.
	 */
	private enum Property implements Key
	{
		KEY("key"),
		CODE("code"),
		LOCATION("location"),
		REPEAT("repeat");

		// name value of property
		private final String value;

		/**
		 * Creates with the property value to use in the native object.
		 * 
		 * @param value value of property name
		 */
		private Property(String value) {
			this.value = value;
		}

		/*
		 * (non-Javadoc)
		 * 
		 * @see org.pepstock.charba.client.commons.Key#value()
		 */
		@Override
		public String value() {
			return value;
		}

	}

	// instance of modifier handler
	private final ModifiersHandler handler;

	/**
	 * Creates an empty object
	 */
	public KeyboardEventInit() {
		super();
		// stores the modifier handler
		this.handler = new ModifiersHandler(getNativeObject());
	}

	/**
	 * Creates an initialization object, setting the keyboard key value.
	 * 
	 * @param key keyboard key initialization property.
	 */
	public KeyboardEventInit(String key) {
		this();
		// stores keyboard key
		setKey(key);
	}

	/**
	 * Creates an initialization object, cloning all source event data
	 * 
	 * @param source source event to clone.
	 */
	public KeyboardEventInit(NativeKeyboardEvent source) {
		super(source);
		// stores the modifier handler
		this.handler = new ModifiersHandler(getNativeObject());
		// sets all source properties
		setKey(source.getKey());
		setCode(source.getCode());
		setRepeat(source.isRepeat());
		setLocation(source.getLocation());
		setCtrlKey(source.isCtrlKey());
		setAltKey(source.isAltKey());
		setShiftKey(source.isShiftKey());
		setMetaKey(source.isMetaKey());
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.pepstock.charba.client.dom.events.IsModifiersHandler#getModifiersHandler()
	 */
	@Override
	public ModifiersHandler getModifiersHandler() {
		return handler;
	}

	/**
	 * Returns a string, defaulting to "", that sets the value of {@link NativeKeyboardEvent} key, the value of the key pressed by the user.
	 * 
	 * @return a string, defaulting to "", that sets the value of {@link NativeKeyboardEvent} key, the value of the key pressed by the user
	 */
	public String getKey() {
		return getValue(Property.KEY, DEFAULT_KEY);
	}

	/**
	 * Sets a string that sets the value of {@link NativeKeyboardEvent} key, the value of the key pressed by the user
	 * 
	 * @param key a string that sets the value of {@link NativeKeyboardEvent} key, the value of the key pressed by the user
	 */
	public void setKey(String key) {
		setValue(Property.KEY, key);
	}

	/**
	 * Returns a string, defaulting to "", that sets the value of {@link NativeKeyboardEvent} code, represents a physical key on the keyboard (as opposed to the character generated
	 * by pressing the key).
	 * 
	 * @return a string, defaulting to "", that sets the value of {@link NativeKeyboardEvent} code, represents a physical key on the keyboard (as opposed to the character generated
	 *         by pressing the key)
	 */
	public String getCode() {
		return getValue(Property.CODE, DEFAULT_CODE);
	}

	/**
	 * Sets a string that sets the value of {@link NativeKeyboardEvent} code, represents a physical key on the keyboard (as opposed to the character generated by pressing the key).
	 * 
	 * @param code a string that sets the value of {@link NativeKeyboardEvent} code, represents a physical key on the keyboard (as opposed to the character generated by pressing
	 *            the key)
	 */
	public void setCode(String code) {
		setValue(Property.CODE, code);
	}

	/**
	 * Returns the location of the key on the keyboard or other input device.
	 * 
	 * @return the location of the key on the keyboard or other input device
	 */
	public KeyboardLocation getLocation() {
		return KeyboardLocation.get(getValue(Property.LOCATION, DEFAULT_LOCATION));
	}

	/**
	 * Sets the location of the key on the keyboard or other input device.
	 * 
	 * @param location the location of the key on the keyboard or other input device
	 */
	public void setLocation(KeyboardLocation location) {
		// checks if argument is consistent
		if (location != null) {
			setValue(Property.LOCATION, location.value());
		}
	}

	/**
	 * Returns a boolean value that is true if the given key is being held down such that it is automatically repeating.
	 * 
	 * @return a boolean value that is true if the given key is being held down such that it is automatically repeating
	 */
	public boolean isRepeat() {
		return getValue(Property.REPEAT, Undefined.BOOLEAN);
	}

	/**
	 * Sets a boolean value that is true if the given key is being held down such that it is automatically repeating.
	 * 
	 * @param repeat a boolean value that is true if the given key is being held down such that it is automatically repeating
	 */
	public void setRepeat(boolean repeat) {
		setValue(Property.REPEAT, repeat);
	}

}