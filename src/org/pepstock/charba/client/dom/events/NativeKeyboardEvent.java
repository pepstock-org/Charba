/**
    Copyright 2017 Andrea "Stock" Stocchero

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

	    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
package org.pepstock.charba.client.dom.events;

import org.pepstock.charba.client.commons.Key;
import org.pepstock.charba.client.commons.NativeName;
import org.pepstock.charba.client.commons.NativeObject;
import org.pepstock.charba.client.dom.enums.KeyboardEventType;
import org.pepstock.charba.client.dom.enums.KeyboardLocation;
import org.pepstock.charba.client.options.IsEvent;

import jsinterop.annotations.JsOverlay;
import jsinterop.annotations.JsPackage;
import jsinterop.annotations.JsProperty;
import jsinterop.annotations.JsType;

/**
 * Describes a user interaction with the keyboard; each event describes a single interaction between the user and a key (or combination of a key with modifier keys) on the
 * keyboard.<br>
 * The event type (keydown or keyup) identifies what kind of keyboard activity occurred.
 * 
 * @author Andrea "Stock" Stocchero
 *
 */
@JsType(isNative = true, name = NativeName.DOM_KEYBOARD_EVENT, namespace = JsPackage.GLOBAL)
public final class NativeKeyboardEvent extends NativeUIEvent {

	/**
	 * Create a keyboard event by its type and initialization configuration.
	 * 
	 * @param type type of the keyboard event
	 * @param init event initialization dictionary to configure the event
	 */
	// Ignores SonarCloud issue, java:S1172 - Unused method parameters should be removed, because this is the way of JSINTEROP to invoke a JavaScript constructor.
	@SuppressWarnings("java:S1172")
	NativeKeyboardEvent(String type, NativeObject init) {
		// do nothing
	}

	/**
	 * Returns the value of the key pressed by the user, taking into consideration the state of modifier keys as well as the keyboard locale and layout.
	 * 
	 * @return the value of the key pressed by the user, taking into consideration the state of modifier keys as well as the keyboard locale and layout.
	 */
	@JsProperty
	public native String getKey();

	/**
	 * Returns a physical key on the keyboard (as opposed to the character generated by pressing the key).<br>
	 * In other words, this property returns a value that isn't altered by keyboard layout or the state of the modifier keys.
	 * 
	 * @return a physical key on the keyboard (as opposed to the character generated by pressing the key)
	 */
	@JsProperty
	public native String getCode();

	/**
	 * Returns an unsigned long representing the location of the key on the keyboard or other input device.
	 * 
	 * @return an unsigned long representing the location of the key on the keyboard or other input device
	 */
	@JsProperty(name = "location")
	private native int getNativeLocation();

	/**
	 * Returns a boolean value that is true if the given key is being held down such that it is automatically repeating.
	 * 
	 * @return a boolean value that is true if the given key is being held down such that it is automatically repeating
	 */
	@JsProperty
	public native boolean isRepeat();

	/**
	 * Returns a boolean value indicating if the event is fired within a composition session.
	 * 
	 * @return a boolean value indicating if the event is fired within a composition session
	 */
	@JsProperty(name = "isComposing")
	public native boolean isComposing();

	/**
	 * Returns true if the alt key was down when the mouse event was fired.
	 *
	 * @return true if the alt key was down when the mouse event was fired
	 */
	@JsProperty
	public native boolean isAltKey();

	/**
	 * Returns true if the control key was down when the mouse event was fired.
	 *
	 * @return true if the control key was down when the mouse event was fired
	 */
	@JsProperty
	public native boolean isCtrlKey();

	/**
	 * Returns true if the meta key was down when the mouse event was fired.
	 *
	 * @return true if the meta key was down when the mouse event was fired
	 */
	@JsProperty
	public native boolean isMetaKey();

	/**
	 * Returns true if the shift key was down when the mouse event was fired.
	 *
	 * @return true if the shift key was down when the mouse event was fired
	 */
	@JsProperty
	public native boolean isShiftKey();

	// ----------------------
	// OVERLAY
	// ----------------------

	/**
	 * Creates a new event object for a specific event type.
	 * 
	 * @param type type of event
	 * @return a new event object for a specific event type
	 */
	@JsOverlay
	public static NativeKeyboardEvent createKeyboardEvent(String type) {
		return createKeyboardEvent(type, KeyboardEventInit.DEFAULT_INSTANCE);
	}

	/**
	 * Creates a new event object for a specific event type.
	 * 
	 * @param type type of event
	 * @return a new event object for a specific event type
	 */
	@JsOverlay
	public static NativeKeyboardEvent createKeyboardEvent(IsEvent type) {
		return createKeyboardEvent(type, KeyboardEventInit.DEFAULT_INSTANCE);
	}

	/**
	 * Creates a new event object for a specific event type with initial configuration.
	 * 
	 * @param type type of event
	 * @param init initial configuration of the event
	 * @return a new event object for a specific event type
	 */
	@JsOverlay
	public static NativeKeyboardEvent createKeyboardEvent(IsEvent type, KeyboardEventInit init) {
		return createKeyboardEvent(Key.checkAndGetIfValid(type).value(), init);
	}

	/**
	 * Creates a new event object for a specific event type with initial configuration.
	 * 
	 * @param type type of event
	 * @param init initial configuration of the event
	 * @return a new event object for a specific event type
	 */
	@JsOverlay
	public static NativeKeyboardEvent createKeyboardEvent(String type, KeyboardEventInit init) {
		return new NativeKeyboardEvent(type, NativeBaseEvent.checkAndGetInit(type, init, KeyboardEventInit.DEFAULT_INSTANCE, KeyboardEventType.values()));
	}

	/**
	 * Returns the location of the key on the keyboard or other input device.
	 * 
	 * @return the location of the key on the keyboard or other input device
	 */
	@JsOverlay
	public KeyboardLocation getLocation() {
		return KeyboardLocation.get(getNativeLocation());
	}

}